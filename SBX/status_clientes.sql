WITH
FECHA_BASE AS (
    SELECT
        to_date('2023-07-09') AS FECHA_BASE
),

ULTIMA_VENTA_LOYALTY AS (
    SELECT
        EMAIL,
        max(to_date(T.TRANSACTION_DATE, 'dd/mm/yy HH24:MI:SS')) AS FECHA_ULTIMA_VENTA
    FROM
        "SEGMENT_EVENTS"."STARBUCKS_REWARDS_MX"."ALSE_LOY_TRANSACTION_ALL" T
    INNER JOIN 
        "SEGMENT_EVENTS"."STARBUCKS_REWARDS_MX"."ALSE_LOY_MEMBER_ALL" M
    ON 
        T.MEMBER_ID = M.ID
    INNER JOIN
        SEGMENT_EVENTS.STARBUCKS_REWARDS_MX.ALSE_LOY_PERSON_ALL AS PERSONS
    ON
        M.ID_PERSON = PERSONS.ID
    WHERE
        1 = 1
    AND 
        T.PRODUCT_ID = 100000002457617
    AND 
        T.PROCESSING_SUB_STATUS IN (
            'ORA_TXN_SUB_STAT_SUCCESS',
            'ORA_TXN_SUB_STAT_NO_PROMO_QF'
        )
    AND 
        T.STATUS IN ('ORA_TXN_STAT_PROCESSED')
    AND 
        T.TRANSACTION_TYPE = ('ORA_TXN_ACC')
    AND 
        T.BRANCH NOT IN ('100000002450436', '100000002452968')
    AND 
        T.PART_SEARCH NOT IN ('Migracion Saldos')
    AND 
        T.TICKET_NUMBER NOT LIKE 'TCKFALLA%'
    GROUP BY
        EMAIL
),

ULTIMA_VENTA_SESSIONM AS (
    SELECT
        EMAIL,
        max(TRANSACTION_DATE) AS FECHA_ULTIMA_VENTA
    FROM 
        "SEGMENT_EVENTS"."SESSIONM_SBX"."SM_TRANSACTION_HEADERS" TXN
    INNER JOIN 
    (
        SELECT DISTINCT 
            TRANSACTION_ID, 
            USER_ID
        FROM 
            "SEGMENT_EVENTS"."SESSIONM_SBX"."SM_TRANSACTION_PAYMENTS"
    ) AS Q
    USING(
        TRANSACTION_ID
    )
    INNER JOIN
        SEGMENT_EVENTS.SESSIONM_SBX.SM_USERS
    USING(
        USER_ID
    )
    WHERE 
        TXN.CHANNEL<> 'API'
    AND
        TXN.TRANSACTION_ID NOT IN 
        (
            SELECT DISTINCT  
                TRANSACTION_ID 
            FROM 
                SEGMENT_EVENTS.SESSIONM_SBX.SM_TRANSACTION_ITEMS
            WHERE 
                POS_ITEM_KEY IN (
                    'MEXLEG_106_sbx',
                    'MEXLEG_109_sbx'
                ) 
        )
    GROUP BY
        USER_ID,
        EMAIL
),

ULTIMA_VENTA AS (
    SELECT 
        EMAIL,
        max(FECHA_ULTIMA_VENTA) FECHA_ULTIMA_VENTA
    FROM
    (
        SELECT * FROM ULTIMA_VENTA_LOYALTY
        UNION ALL
        SELECT * FROM ULTIMA_VENTA_SESSIONM
    )
    GROUP BY
        EMAIL
),

ESTRELLAS_Y_JOINING_DATE AS (
    SELECT DISTINCT
        EMAIL,
        to_date(REGISTERED_TIMESTAMP) AS JOINING_DATE,
        LAST_VALUE(CURRENT_BALANCE) OVER (PARTITION BY SM_USERS.USER_ID ORDER BY SM_USER_POINT_ACCOUNTS.UPDATED_AT ASC) AS ESTRELLAS
    FROM
        SEGMENT_EVENTS.SESSIONM_SBX.SM_USER_POINT_ACCOUNTS
    INNER JOIN
        SEGMENT_EVENTS.SESSIONM_SBX.SM_USERS
    ON
        lower(SM_USER_POINT_ACCOUNTS.USER_ID) = lower(SM_USERS.USER_ID)
),

STATUS_MEMBERS AS (
    SELECT
        EMAIL,
        CASE
            WHEN ULTIMA_VENTA.FECHA_ULTIMA_VENTA >= FECHA_BASE - 91  THEN 'ACTIVE'
            WHEN ULTIMA_VENTA.FECHA_ULTIMA_VENTA >= FECHA_BASE - 122 THEN 'LAPSED_L'
            WHEN ULTIMA_VENTA.FECHA_ULTIMA_VENTA >= FECHA_BASE - 152 THEN 'LAPSED_M'
            WHEN ULTIMA_VENTA.FECHA_ULTIMA_VENTA >= FECHA_BASE - 182 THEN 'LAPSED_H'
            WHEN ESTRELLAS = 0 AND JOINING_DATE < FECHA_BASE - 30 THEN 'ZERO_INA'
            WHEN ESTRELLAS = 0 THEN 'ZERO_NEW'
            ELSE 'INACTIVE'
        END AS STATUS
    FROM
        ULTIMA_VENTA
    LEFT JOIN
        ESTRELLAS_Y_JOINING_DATE
    USING(
        EMAIL
    )
    JOIN
        FECHA_BASE
)

SELECT 
    * 
FROM 
    STATUS_MEMBERS
;