-- INSERT INTO WOW_REWARDS.SBX_REWARDS.SEGMENTACION_INACTIVOS
WITH
FECHA_BASE AS (
    SELECT
        to_date('2023-07-09') AS FECHA_BASE
),

ULTIMA_VENTA_LOYALTY AS (
    SELECT
        EMAIL,
        max(to_date(T.TRANSACTION_DATE, 'dd/mm/yy HH24:MI:SS')) AS FECHA_ULTIMA_VENTA
    FROM
        "SEGMENT_EVENTS"."STARBUCKS_REWARDS_MX"."ALSE_LOY_TRANSACTION_ALL" T
    INNER JOIN 
        "SEGMENT_EVENTS"."STARBUCKS_REWARDS_MX"."ALSE_LOY_MEMBER_ALL" M
    ON 
        T.MEMBER_ID = M.ID
    INNER JOIN
        SEGMENT_EVENTS.STARBUCKS_REWARDS_MX.ALSE_LOY_PERSON_ALL AS PERSONS
    ON
        M.ID_PERSON = PERSONS.ID
    WHERE
        1 = 1
    AND 
        T.PRODUCT_ID = 100000002457617
    AND 
        T.PROCESSING_SUB_STATUS IN (
            'ORA_TXN_SUB_STAT_SUCCESS',
            'ORA_TXN_SUB_STAT_NO_PROMO_QF'
        )
    AND 
        T.STATUS IN ('ORA_TXN_STAT_PROCESSED')
    AND 
        T.TRANSACTION_TYPE = ('ORA_TXN_ACC')
    AND 
        T.BRANCH NOT IN ('100000002450436', '100000002452968')
    AND 
        T.PART_SEARCH NOT IN ('Migracion Saldos')
    AND 
        T.TICKET_NUMBER NOT LIKE 'TCKFALLA%'
    GROUP BY
        EMAIL
),

ULTIMA_VENTA_SESSIONM AS (
    SELECT
        EMAIL,
        max(TRANSACTION_DATE) AS FECHA_ULTIMA_VENTA
    FROM 
        "SEGMENT_EVENTS"."SESSIONM_SBX"."SM_TRANSACTION_HEADERS" TXN
    INNER JOIN 
    (
        SELECT DISTINCT 
            TRANSACTION_ID, 
            USER_ID
        FROM 
            "SEGMENT_EVENTS"."SESSIONM_SBX"."SM_TRANSACTION_PAYMENTS"
    ) AS Q
    USING(
        TRANSACTION_ID
    )
    INNER JOIN
        SEGMENT_EVENTS.SESSIONM_SBX.SM_USERS
    USING(
        USER_ID
    )
    WHERE 
        TXN.CHANNEL<> 'API'
    AND
        TXN.TRANSACTION_ID NOT IN 
        (
            SELECT DISTINCT  
                TRANSACTION_ID 
            FROM 
                SEGMENT_EVENTS.SESSIONM_SBX.SM_TRANSACTION_ITEMS
            WHERE 
                POS_ITEM_KEY IN (
                    'MEXLEG_106_sbx',
                    'MEXLEG_109_sbx'
                ) 
        )
    GROUP BY
        USER_ID,
        EMAIL
),

ULTIMA_VENTA AS (
    SELECT 
        EMAIL,
        max(FECHA_ULTIMA_VENTA) FECHA_ULTIMA_VENTA
    FROM
    (
        SELECT * FROM ULTIMA_VENTA_LOYALTY
        UNION ALL
        SELECT * FROM ULTIMA_VENTA_SESSIONM
    )
    GROUP BY
        EMAIL
),

ESTRELLAS_Y_JOINING_DATE AS (
    SELECT DISTINCT
        EMAIL,
        to_date(REGISTERED_TIMESTAMP) AS JOINING_DATE,
        LAST_VALUE(CURRENT_BALANCE) OVER (PARTITION BY SM_USERS.USER_ID ORDER BY SM_USER_POINT_ACCOUNTS.UPDATED_AT ASC) AS ESTRELLAS
    FROM
        SEGMENT_EVENTS.SESSIONM_SBX.SM_USER_POINT_ACCOUNTS
    INNER JOIN
        SEGMENT_EVENTS.SESSIONM_SBX.SM_USERS
    ON
        lower(SM_USER_POINT_ACCOUNTS.USER_ID) = lower(SM_USERS.USER_ID)
),

STATUS_MEMBERS AS (
    SELECT
        EMAIL,
        CASE
            WHEN ULTIMA_VENTA.FECHA_ULTIMA_VENTA >= FECHA_BASE - 91  THEN 'ACTIVE'
            WHEN ULTIMA_VENTA.FECHA_ULTIMA_VENTA >= FECHA_BASE - 122 THEN 'LAPSED_L'
            WHEN ULTIMA_VENTA.FECHA_ULTIMA_VENTA >= FECHA_BASE - 152 THEN 'LAPSED_M'
            WHEN ULTIMA_VENTA.FECHA_ULTIMA_VENTA >= FECHA_BASE - 182 THEN 'LAPSED_H'
            WHEN ESTRELLAS = 0 AND JOINING_DATE < FECHA_BASE - 30 THEN 'ZERO_INA'
            WHEN ESTRELLAS = 0 THEN 'ZERO_NEW'
            ELSE 'INACTIVE'
        END AS STATUS
    FROM
        ULTIMA_VENTA
    LEFT JOIN
        ESTRELLAS_Y_JOINING_DATE
    USING(
        EMAIL
    )
    JOIN
        FECHA_BASE
),

USUARIOS_GOLD AS (
    SELECT DISTINCT
        EMAIL,
        LAST_VALUE(NAME) OVER (PARTITION BY SM_TIER_MEMBER_HISTORY.USER_ID ORDER BY LAST_UPDATED_AT ASC) AS TIER
    FROM 
        SEGMENT_EVENTS.SESSIONM_SBX.SM_TIER_MEMBER_HISTORY
    INNER JOIN
        SEGMENT_EVENTS.SESSIONM_SBX.SM_TIER_LEVELS
    USING(
        TIER_LEVEL_ID
    )
    INNER JOIN
        SEGMENT_EVENTS.SESSIONM_SBX.SM_USERS
    ON
        lower(SM_USERS.USER_ID) = lower(SM_TIER_MEMBER_HISTORY.USER_ID)
    WHERE
        EXITED_AT IS null
    QUALIFY
        TIER IN ('Gold')
),

INACTIVE AS (
    SELECT
        EMAIL, 
        'INACTIVE' AS SEGMENTO, 
        'GP' AS FLAG_GC
    FROM 
        STATUS_MEMBERS
    WHERE 
        STATUS = 'INACTIVE'
    AND
        lower(EMAIL) IN (SELECT lower(EMAIL) FROM USUARIOS_GOLD)
),

LAPSED AS (
    SELECT
        EMAIL,
        'LAPSED' AS SEGMENTO,
        'GP' AS FLAG_GC
    FROM 
        STATUS_MEMBERS
    WHERE 
        STATUS LIKE '%LAPSED%'
),

OLDZERO AS (
    SELECT 
        EMAIL
    FROM
        STATUS_MEMBERS
    WHERE
        STATUS = 'ZERO_INA'
),

OLDZERO_GP_GC AS (
    SELECT 
        OLDZERO.EMAIL,
        'OLD_ZERO' AS SEGMENTO,
        ifnull(GC_SAM.FLAG_GC_D, 'GP') AS FLAG_GC
    FROM
        OLDZERO
    LEFT JOIN
    (
        SELECT 
            EMAIL, 
            'GC' AS FLAG_GC_D 
        FROM
            OLDZERO tablesample bernoulli (10)
    ) AS GC_SAM
    ON 
        OLDZERO.EMAIL = GC_SAM.EMAIL
),

SEGMENTACION_COMPLETA AS (
    SELECT
        *
    FROM
        OLDZERO_GP_GC
        
    UNION ALL
    
    SELECT
        *
    FROM
        LAPSED
        
    UNION ALL
    
    SELECT
        *
    FROM
        INACTIVE
)

SELECT
    SEGMENTACION_COMPLETA.EMAIL,
    '2023-29' AS YEAR_WEEK,
    SEGMENTACION_COMPLETA.SEGMENTO AS ULTRASEGMENTO,
    null as PROMO,
    SEGMENTACION_COMPLETA.SEGMENTO AS TAG_GRUPO,
    SEGMENTACION_COMPLETA.SEGMENTO,
    SEGMENTACION_COMPLETA.FLAG_GC,
    EXTERNAL_USER_ID AS EXTERNAL_ID,
    USER_ID
FROM
    SEGMENTACION_COMPLETA
INNER JOIN
    SEGMENT_EVENTS.SESSIONM_SBX.SM_USERS
USING(
    EMAIL
)
INNER JOIN
    SEGMENT_EVENTS.SESSIONM_SBX.SM_EXTERNAL_USER_MAPPINGS
USING(
    USER_ID
)
WHERE
    EXTERNAL_USER_ID LIKE 'MEX_ALSEA:%'
;